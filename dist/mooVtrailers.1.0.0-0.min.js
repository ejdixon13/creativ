/**
 * Created by ericjohndixon on 5/26/16.
 */
angular.module('mooVtrailers', [
        'angular-http-helper',
        'ngAnimate',
        'ngMaterial',
        'ngAria',
        'mooVtrailers.core',
        'mooVtrailers.apiServices'
    ])
    .run([function () {
        //HTTP MOCKED BACKEND
        //HttpBackendDataService.setupBackend(false);

        //IFRAME PLAYER SETUP
        var tag = document.createElement('script');
        tag.src = "http://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }]);
angular.module('mooVtrailers.core', []);
angular.module('mooVtrailers.apiServices', []);
(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('movieSearchItem', ['$rootScope', 'YouTubeService', 'MtTheaterService', 'MtMessageService', function ($rootScope, YouTubeService, MtTheaterService, MtMessageService ) {
      return {
          restrict: 'E',
          link: linker,
          templateUrl: 'app/components/movie-search-item/movie-search-item-tpl.html',
          require: '^mtSearchBar',
          scope: {
              movie: '=movie'
          }
      };

      ////////////////////////////////////////////////////
      function linker(scope, element, attrs, ctrl) {
          scope.playQueue = function playQueue() {
              ctrl.searchString = '';
              MtTheaterService.theater.showTheater = true;
              YouTubeService.playVideoById(scope.movie.trailers[0].key);

              //YouTubeService.getYouTubeIdByMovieItem(scope.movie).then(function(movieId){
              //    if(movieId != 'No trailer found') {
              //        ctrl.searchString = '';
              //        MtTheaterService.theater.showTheater = true;
              //        YouTubeService.playVideoById(movieId);
              //    }
              //});
              //$rootScope.$broadcast('play-queue', movieKey);
          };

          scope.showNoTrailerMessage = function() {
              MtMessageService.showMessage('No Trailer Available', 3000);
          }

      }

    }]);
})();
(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('mtHeader', [function () {
      return {
        restrict: 'E',
        controller: 'MtHeaderCtrl',
        controllerAs: 'mtHeader',
        templateUrl: 'app/components/mt-header/mt-header-tpl.html'
      };
    }])
    .controller('MtHeaderCtrl', [ 'MtTheaterService', '$scope', function(MtTheaterService, $scope) {
        var mtHeader = this;
        $scope.theater = MtTheaterService.theater;
        //$scope.openLeftMenu = function() {
        //    $mdSidenav('left').toggle();
        //}
    }]);
})();

(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('mtLogo', [function () {
        //TODO: Adjust logo size to be responsive
      return {
          restrict: 'E',
          scope: {
              isMinimalVersion: '=isMinimalVersion'
          },
          link: linker,
          template: '<span class="logo logo__base-text"><span ng-show="!isMinimalVersion">moo</span> <span class="logo__accent-text">V</span> <span ng-show="!isMinimalVersion">trailers</span></span>'
      };

        function linker() {

        }
    }])
})();

(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('mtPopularTitles', [function () {
      return {
        restrict: 'E',
        controller: 'MtPopularTitlesCtrl',
        controllerAs: 'mtPopularTitles',
        templateUrl: 'app/components/mt-popular-titles/mt-popular-titles-tpl.html'
      };
    }])
    .controller('MtPopularTitlesCtrl', ['RottenTomatoesService', 'TmdbService', 'MtTheaterService', 'YouTubeService',
        function(RottenTomatoesService, TmdbService, MtTheaterService, YouTubeService) {
        var mtPopularTitles = this;
        mtPopularTitles.playQueue = playQueue;
        TmdbService.getUpcomingMovies()
            .then(function (response) {
                mtPopularTitles.upcomingMovies = response.data.results;


                //Get Trailers
                mtPopularTitles.upcomingMovies.forEach(function (upcomingMovie) {
                    TmdbService.getMovieTrailerById(upcomingMovie.id)
                        .then(function (response) {
                            upcomingMovie.trailers = response.data.results.filter(function(mediaItem) { return (mediaItem.site == 'YouTube' && mediaItem.type == 'Trailer')});
                            upcomingMovie.hasTrailer = upcomingMovie.trailers.length > 0;
                        })
                });
        });

        function playQueue(trailers) {
            MtTheaterService.theater.showTheater = true;
            MtTheaterService.theater.searchOnTop = true;
            YouTubeService.playVideoById(trailers[0].key);
        }


    }]);
})();
(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('mtPoster', [function () {
      return {
          restrict: 'E',
          link: linker,
          templateUrl: 'app/components/mt-poster/mt-poster-tpl.html',
          scope: {
              width  : '@pWidth',
              height : '@pHeight',
              pSrc    : '@pSrc',
              hasTrailer: '=hasTrailer',
              elevation: '=elevation'
          }
      };

      ////////////////////////////////////////////////////
      function linker(scope, element, attrs) {

      }

    }]);
})();
/**
 * Created by ericjohndixon on 6/1/16.
 */
(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('mtSearchBar', [function () {
        return {
            restrict: 'E',
            controller: 'MtSearchBarCtrl',
            controllerAs: 'mtSearchBar',
            bindToController: true,
            templateUrl: 'app/components/mt-search-bar/mt-search-bar-tpl.html'
        };
    }])
    .controller('MtSearchBarCtrl', ['MovieDataService', '$scope', function(MovieDataService, $scope) {
        var mtSearchBar = this;
        mtSearchBar.searchString = '';
        mtSearchBar.search = search;
        mtSearchBar.hideResults = false;

        function search() {
            MovieDataService.getMoviesByQuery(mtSearchBar.searchString).then(function(response) {
                mtSearchBar.movies = response.data.movies;
            });
        }

    }]);
})();



(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('mtTheater', [function () {
      return {
        restrict: 'E',
        controller: 'MtTheaterCtrl',
        controllerAs: 'mtTheater',
        templateUrl: 'app/components/mt-theater/mt-theater-tpl.html'
      };
    }])
    .controller('MtTheaterCtrl', ['$scope', 'MtTheaterService', '$mdBottomSheet', function($scope, MtTheaterService, $mdBottomSheet) {
        var mtTheater = this;
        mtTheater.theater = MtTheaterService.theater;
        $scope.$on('play-queue', function(event, args) {
            mtTheater.thing = 'thing';
            // do what you want to do
        });

        $scope.openBottomSheet = function() {
            $mdBottomSheet.show({
                template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'
            });
        };
    }]);
})();
/**
 * Created by ericjohndixon on 6/2/16.
 */
(function () {
    'use strict';

    angular
        .module('mooVtrailers')
        .factory('MtTheaterService', MtTheaterService);
    //MtTheaterService.$inject = [''];

    //FACTORY METHOD
    function MtTheaterService() {
        return {
            theater : {
                showTheater: false,
                noTrailerAvailable: false,
                searchOnTop: false
            }
        }
    }
})();
///**
// * Created by ericjohndixon on 4/14/16.
// */
///**
// * Factory: HttpBackendService
// *
// * This can be used to imitate a backend when a real backend is not handy.
// */
//(function () {
//    'use strict';
//
//    angular
//        .module('mooVtrailers.core')
//        .factory('HttpBackendDataService', HttpBackendDataService);
//    HttpBackendDataService.$inject = ['$httpBackend'];
//
//    //FACTORY METHOD
//    function HttpBackendDataService($httpBackend) {
//        /*****************************************************************************************************
//         * TMDB FIND API
//         * PATH: https://api.themoviedb.org/3/find/$ID$?external_source=imdb_id
//         *****************************************************************************************************/
//        var batmanSupermanInfo = {"movie_results":[{"adult":false,"backdrop_path":"/vsjBeMPZtyB7yNsYY56XYxifaQZ.jpg","genre_ids":[28,12,14],"id":209112,"original_language":"en","original_title":"Batman v Superman: Dawn of Justice","overview":"Fearing the actions of a god-like Super Hero left unchecked, Gotham City’s own formidable, forceful vigilante takes on Metropolis’s most revered, modern-day savior, while the world wrestles with what sort of hero it really needs. And with Batman and Superman at war with one another, a new threat quickly arises, putting mankind in greater danger than it’s ever known before.","release_date":"2016-03-23","poster_path":"/cGOPbv9wA5gEejkUN892JrveARt.jpg","popularity":44.239067,"title":"Batman v Superman: Dawn of Justice","video":false,"vote_average":5.6,"vote_count":2680}],"person_results":[],"tv_results":[],"tv_episode_results":[],"tv_season_results":[]};
//        var darkKnightInfo = {"movie_results":[{"adult":false,"backdrop_path":"/nnMC0BM6XbjIIrT4miYmMtPGcQV.jpg","genre_ids":[18,28,80,53],"id":155,"original_language":"en","original_title":"The Dark Knight","overview":"Batman raises the stakes in his war on crime. With the help of Lt. Jim Gordon and District Attorney Harvey Dent, Batman sets out to dismantle the remaining criminal organizations that plague the streets. The partnership proves to be effective, but they soon find themselves prey to a reign of chaos unleashed by a rising criminal mastermind known to the terrified citizens of Gotham as the Joker.","release_date":"2008-07-16","poster_path":"/1hRoyzDtpgMU7Dz4JF22RANzQO7.jpg","popularity":7.128431,"title":"The Dark Knight","video":false,"vote_average":8.0,"vote_count":7484}],"person_results":[],"tv_results":[],"tv_episode_results":[],"tv_season_results":[]};
//        var batmanBeginsInfo = {"movie_results":[{"adult":false,"backdrop_path":"/65JWXDCAfwHhJKnDwRnEgVB411X.jpg","genre_ids":[28,80,18],"id":272,"original_language":"en","original_title":"Batman Begins","overview":"Driven by tragedy, billionaire Bruce Wayne dedicates his life to uncovering and defeating the corruption that plagues his home, Gotham City.  Unable to work within the system, he instead creates a new identity, a symbol of fear for the criminal underworld - The Batman.","release_date":"2005-06-14","poster_path":"/xiosOeLfzPbfLfqui41kSWnO0sZ.jpg","popularity":7.523181,"title":"Batman Begins","video":false,"vote_average":7.3,"vote_count":4277}],"person_results":[],"tv_results":[],"tv_episode_results":[],"tv_season_results":[]};
//        var batmanInfo = {"movie_results":[{"adult":false,"backdrop_path":"/2blmxp2pr4BhwQr74AdCfwgfMOb.jpg","genre_ids":[14,28],"id":268,"original_language":"en","original_title":"Batman","overview":"The Dark Knight of Gotham City begins his war on crime with his first major enemy being the clownishly homicidal Joker, who has seized control of Gotham's underworld.","release_date":"1989-06-23","poster_path":"/kBf3g9crrADGMc2AMAMlLBgSm2h.jpg","popularity":6.182461,"title":"Batman","video":false,"vote_average":6.8,"vote_count":1032}],"person_results":[],"tv_results":[],"tv_episode_results":[],"tv_season_results":[]};
//
//        /*****************************************************************************************************
//         * TMDB MOVIE API
//         * PATH:
//         *****************************************************************************************************/
//         var batmanSupermanVid = {"id":209112,"results":[{"id":"571c8dc4c3a36842aa000190","iso_639_1":"en","iso_3166_1":"US","key":"6as8ahAr1Uc","name":"Exclusive Sneak","site":"YouTube","size":1080,"type":"Teaser"},{"id":"571c4372c3a3684e6200007a","iso_639_1":"en","iso_3166_1":"US","key":"0WWzgGyAH6Y","name":"Official Comic-Con Trailer","site":"YouTube","size":1080,"type":"Trailer"},{"id":"571c8e08c3a368197c005a20","iso_639_1":"en","iso_3166_1":"US","key":"fis-9Zqu2Ro","name":"Official Trailer 2","site":"YouTube","size":1080,"type":"Trailer"},{"id":"571c8d9892514121a0005d97","iso_639_1":"en","iso_3166_1":"US","key":"NhWg7AQLI_8","name":"Official Final Trailer","site":"YouTube","size":1080,"type":"Trailer"},{"id":"571c4307c3a36864e00042ac","iso_639_1":"en","iso_3166_1":"US","key":"IwfUnkBfdZ4","name":"Official Teaser Trailer","site":"YouTube","size":1080,"type":"Trailer"},{"id":"571c433492514115e2001920","iso_639_1":"en","iso_3166_1":"US","key":"aUN0F5wKbGE","name":"TV Spot 1","site":"YouTube","size":1080,"type":"Teaser"}]};
//         var darkKnightVid = {"id":155,"results":[{"id":"533ec652c3a368544800013c","iso_639_1":"en","iso_3166_1":"US","key":"GVx5K8WfFJY","name":"Trailer 2","site":"YouTube","size":720,"type":"Trailer"},{"id":"533ec652c3a368544800013d","iso_639_1":"en","iso_3166_1":"US","key":"r94bLJi3P2c","name":"Trailer 3","site":"YouTube","size":720,"type":"Trailer"}]};
//         var batmanBeginsVid = {"id":272,"results":[{"id":"533ec653c3a3685448000233","iso_639_1":"en","iso_3166_1":"US","key":"lu2ecPMX0kI","name":"Trailer 1","site":"YouTube","size":720,"type":"Teaser"},{"id":"533ec653c3a3685448000234","iso_639_1":"en","iso_3166_1":"US","key":"dYYRjVof6TU","name":"Trailer 2","site":"YouTube","size":720,"type":"Trailer"},{"id":"533ec653c3a3685448000235","iso_639_1":"en","iso_3166_1":"US","key":"5WGbUCA1K9A","name":"Trailer 3","site":"YouTube","size":720,"type":"Trailer"}]};
//         var batmanVid = {"id":268,"results":[{"id":"5470941492514170660028f3","iso_639_1":"en","iso_3166_1":"US","key":"dgC9Q0uhX70","name":"Official Trailer","site":"YouTube","size":720,"type":"Trailer"}]};
//
//        /*****************************************************************************************************
//         * ROTTEN TOMATOES
//         *****************************************************************************************************/
//         var upcomingMovies = {"total":11,"movies":[{"id":"771361911","title":"Star Trek Beyond","year":2016,"mpaa_rating":"PG-13","runtime":120,"release_dates":{"theater":"2016-07-22"},"ratings":{"critics_score":-1,"audience_score":99},"synopsis":"Captain Kirk and the crew of the Enterprise encounter an alien warrior race when marooned on a distant planet after the destruction of their spaceship in this thrilling sequel directed by Fast & Furious director Justin Lin.","posters":{"thumbnail":"https://resizing.flixster.com/7dlMefsAPRsKFkegBNLr8YnHS8g=/52x81/v1.bTsxMjExMTg0NztqOzE3MDIyOzIwNDg7MTg5NzsyOTYy","profile":"https://resizing.flixster.com/7dlMefsAPRsKFkegBNLr8YnHS8g=/52x81/v1.bTsxMjExMTg0NztqOzE3MDIyOzIwNDg7MTg5NzsyOTYy","detailed":"https://resizing.flixster.com/7dlMefsAPRsKFkegBNLr8YnHS8g=/52x81/v1.bTsxMjExMTg0NztqOzE3MDIyOzIwNDg7MTg5NzsyOTYy","original":"https://resizing.flixster.com/7dlMefsAPRsKFkegBNLr8YnHS8g=/52x81/v1.bTsxMjExMTg0NztqOzE3MDIyOzIwNDg7MTg5NzsyOTYy"},"abridged_cast":[{"name":"Chris Pine","id":"326393041","characters":["Kirk"]},{"name":"Zachary Quinto","id":"770678894","characters":["Spock"]},{"name":"Anton Yelchin","id":"162673323","characters":["Chekov"]},{"name":"John Cho","id":"300371277","characters":["Sulu"]},{"name":"Simon Pegg","id":"162684057","characters":["Scotty"]}],"alternate_ids":{"imdb":"2660888"},"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771361911.json","alternate":"https://www.rottentomatoes.com/m/star_trek_beyond/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771361911/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771361911/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771361911/similar.json"}},{"id":"771372077","title":"Ice Age: Collision Course","year":2016,"mpaa_rating":"PG","runtime":100,"release_dates":{"theater":"2016-07-22"},"ratings":{"critics_rating":"Rotten","critics_score":19,"audience_score":93},"synopsis":"Scrat's epic pursuit of the elusive acorn catapults him into the universe where he accidentally sets off a series of cosmic events that transform and threaten the Ice Age World. To save themselves, Sid, Manny, Diego, and the rest of the herd must leave their home and embark on a quest full of comedy and adventure, travelling to exotic new lands and encountering a host of colorful new characters.","posters":{"thumbnail":"https://resizing.flixster.com/rAT2e2LA2-ndkY_tycDiukBQwVs=/54x72/v1.bTsxMTM2MjUwOTtqOzE3MTA1OzIwNDg7NjAwOzgwMA","profile":"https://resizing.flixster.com/rAT2e2LA2-ndkY_tycDiukBQwVs=/54x72/v1.bTsxMTM2MjUwOTtqOzE3MTA1OzIwNDg7NjAwOzgwMA","detailed":"https://resizing.flixster.com/rAT2e2LA2-ndkY_tycDiukBQwVs=/54x72/v1.bTsxMTM2MjUwOTtqOzE3MTA1OzIwNDg7NjAwOzgwMA","original":"https://resizing.flixster.com/rAT2e2LA2-ndkY_tycDiukBQwVs=/54x72/v1.bTsxMTM2MjUwOTtqOzE3MTA1OzIwNDg7NjAwOzgwMA"},"abridged_cast":[{"name":"Ray Romano","id":"162674838","characters":["Manny"]},{"name":"John Leguizamo","id":"162652698","characters":["Sid"]},{"name":"Denis Leary","id":"162659182","characters":["Diego"]},{"name":"Queen Latifah","id":"162667338","characters":["Ellie"]},{"name":"Jennifer Lopez","id":"162652167","characters":["Shira"]}],"alternate_ids":{"imdb":"3416828"},"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771372077.json","alternate":"https://www.rottentomatoes.com/m/ice_age_collision_course/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771372077/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771372077/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771372077/similar.json"}},{"id":"771432529","title":"Lights Out","year":2016,"mpaa_rating":"PG-13","runtime":81,"release_dates":{"theater":"2016-07-22"},"ratings":{"critics_rating":"Fresh","critics_score":100,"audience_score":94},"synopsis":"When a bloodthirsty supernatural being that lurks in the shadows preys upon a family, a young woman must fight to protect herself, save her little half-brother, and uncover a mystery about her family's shadowy past.","posters":{"thumbnail":"https://resizing.flixster.com/3TfSp_k_9on4xRdQx5FEAyjWBo0=/54x72/v1.bTsxMTc3NTI0NjtqOzE3MDE3OzIwNDg7MTM4MDsxODQw","profile":"https://resizing.flixster.com/3TfSp_k_9on4xRdQx5FEAyjWBo0=/54x72/v1.bTsxMTc3NTI0NjtqOzE3MDE3OzIwNDg7MTM4MDsxODQw","detailed":"https://resizing.flixster.com/3TfSp_k_9on4xRdQx5FEAyjWBo0=/54x72/v1.bTsxMTc3NTI0NjtqOzE3MDE3OzIwNDg7MTM4MDsxODQw","original":"https://resizing.flixster.com/3TfSp_k_9on4xRdQx5FEAyjWBo0=/54x72/v1.bTsxMTc3NTI0NjtqOzE3MDE3OzIwNDg7MTM4MDsxODQw"},"abridged_cast":[{"name":"Teresa Palmer","id":"347990464","characters":["Rebecca"]},{"name":"Gabriel Bateman","id":"771507083","characters":["Martin"]},{"name":"Alexander DiPersia","id":"771828355","characters":["Bret"]},{"name":"Billy Burke","id":"341818117","characters":["Paul"]},{"name":"Maria Bello","id":"162654542","characters":["Sophie"]}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771432529.json","alternate":"https://www.rottentomatoes.com/m/lights_out_2016/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771432529/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771432529/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771432529/similar.json"}},{"id":"771436837","title":"Absolutely Fabulous: The Movie","year":2016,"mpaa_rating":"R","runtime":86,"release_dates":{"theater":"2016-07-22"},"ratings":{"critics_rating":"Fresh","critics_score":85,"audience_score":90},"synopsis":"Appropriate for their big screen debut, Edina and Patsy are still oozing glitz and glamour, living the high life they are accustomed to; shopping, drinking and clubbing their way around London's trendiest hotspots. Blamed for a major incident at an uber fashionable launch party, they become entangled in a media storm and are relentlessly pursued by the paparazzi. Fleeing penniless to the glamorous playground of the super-rich, the French Riviera, they hatch a plan to make their escape permanent and live the high life forever more!","posters":{"thumbnail":"https://resizing.flixster.com/cQPUPTiO0nw0jwbbpDGa7zidqF8=/54x80/v1.bTsxMjExMTg0ODtqOzE3MDIzOzIwNDg7NjgxMzsxMDA2Mw","profile":"https://resizing.flixster.com/cQPUPTiO0nw0jwbbpDGa7zidqF8=/54x80/v1.bTsxMjExMTg0ODtqOzE3MDIzOzIwNDg7NjgxMzsxMDA2Mw","detailed":"https://resizing.flixster.com/cQPUPTiO0nw0jwbbpDGa7zidqF8=/54x80/v1.bTsxMjExMTg0ODtqOzE3MDIzOzIwNDg7NjgxMzsxMDA2Mw","original":"https://resizing.flixster.com/cQPUPTiO0nw0jwbbpDGa7zidqF8=/54x80/v1.bTsxMjExMTg0ODtqOzE3MDIzOzIwNDg7NjgxMzsxMDA2Mw"},"abridged_cast":[{"name":"Jennifer Saunders","id":"364655376","characters":["Edina Monsoon"]},{"name":"Joanna Lumley","id":"162661482","characters":["Patsy Stone"]},{"name":"Julia Sawalha","id":"162655786","characters":["Saffy"]},{"name":"Jane Horrocks","id":"162702635","characters":["Bubble"]},{"name":"June Whitfield","id":"770710267","characters":["Mother"]}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436837.json","alternate":"https://www.rottentomatoes.com/m/absolutely_fabulous_the_movie/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436837/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436837/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436837/similar.json"}},{"id":"771439288","title":"Don't Think Twice","year":2016,"mpaa_rating":"R","runtime":92,"release_dates":{"theater":"2016-07-22"},"ratings":{"critics_rating":"Fresh","critics_score":100,"audience_score":91},"synopsis":"When a member of a popular New York City improv troupe gets cast on a hit TV show, the rest of the group - all best friends - start to realize that not everyone is going to make it after all. From the director of Sleepwalk With Me and the creator of This American Life comes Don't Think Twice, a critically acclaimed comedy packed with comic stars Keegan-Michael Key, Gillian Jacobs, Mike Birbiglia, Kate Micucci, Chris Gethard and Tami Sagher that presents a hilarious and honest look at the lives of professional funny people.","posters":{"thumbnail":"https://resizing.flixster.com/6ctrhcpcbYp-VH9hq4PrRcIEw8o=/54x80/v1.bTsxMTk0NjQ3OTtqOzE3MDI3OzIwNDg7NDcyOzcwMA","profile":"https://resizing.flixster.com/6ctrhcpcbYp-VH9hq4PrRcIEw8o=/54x80/v1.bTsxMTk0NjQ3OTtqOzE3MDI3OzIwNDg7NDcyOzcwMA","detailed":"https://resizing.flixster.com/6ctrhcpcbYp-VH9hq4PrRcIEw8o=/54x80/v1.bTsxMTk0NjQ3OTtqOzE3MDI3OzIwNDg7NDcyOzcwMA","original":"https://resizing.flixster.com/6ctrhcpcbYp-VH9hq4PrRcIEw8o=/54x80/v1.bTsxMTk0NjQ3OTtqOzE3MDI3OzIwNDg7NDcyOzcwMA"},"abridged_cast":[{"name":"Keegan-Michael Key","id":"770679981","characters":["Jack"]},{"name":"Gillian Jacobs","id":"770706078","characters":["Samantha"]},{"name":"Mike Birbiglia","id":"770762134","characters":["Miles"]},{"name":"Kate Micucci","id":"770836879","characters":["Allison"]},{"name":"Chris Gethard","id":"771408533","characters":["Bill"]}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771439288.json","alternate":"https://www.rottentomatoes.com/m/dont_think_twice/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771439288/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771439288/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771439288/similar.json"}},{"id":"771438155","title":"Nerve","year":2016,"mpaa_rating":"PG-13","runtime":96,"release_dates":{"theater":"2016-07-27"},"ratings":{"critics_score":-1,"audience_score":95},"synopsis":"Industrious high school senior, Vee Delmonico, has had it with living life on the sidelines. When pressured by friends to join the popular online game Nerve, Vee decides to sign up for just one dare in what seems like harmless fun. But as she finds herself caught up in the thrill of the adrenaline-fueled competition partnered with a mysterious stranger, the game begins to take a sinister turn with increasingly dangerous acts, leading her into a high stakes finale that will determine her entire future.","posters":{"thumbnail":"https://resizing.flixster.com/9UyWU_tirSaXyGwiZxMX8FRkXi4=/53x81/v1.bTsxMjA2MTc4NDtqOzE3MDQzOzIwNDg7MzYwMDs1NTUw","profile":"https://resizing.flixster.com/9UyWU_tirSaXyGwiZxMX8FRkXi4=/53x81/v1.bTsxMjA2MTc4NDtqOzE3MDQzOzIwNDg7MzYwMDs1NTUw","detailed":"https://resizing.flixster.com/9UyWU_tirSaXyGwiZxMX8FRkXi4=/53x81/v1.bTsxMjA2MTc4NDtqOzE3MDQzOzIwNDg7MzYwMDs1NTUw","original":"https://resizing.flixster.com/9UyWU_tirSaXyGwiZxMX8FRkXi4=/53x81/v1.bTsxMjA2MTc4NDtqOzE3MDQzOzIwNDg7MzYwMDs1NTUw"},"abridged_cast":[{"name":"Emma Roberts","id":"326298386","characters":["Vee"]},{"name":"Juliette Lewis","id":"162654115"},{"name":"Dave Franco","id":"770703179","characters":["Ian"]},{"name":"Marc John Jefferies","id":"301479992"},{"name":"Samira Wiley","id":"771398467"}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771438155.json","alternate":"https://www.rottentomatoes.com/m/nerve_2016/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771438155/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771438155/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771438155/similar.json"}},{"id":"771398975","title":"Jason Bourne","year":2016,"mpaa_rating":"PG-13","runtime":"","release_dates":{"theater":"2016-07-29"},"ratings":{"critics_score":-1,"audience_score":99},"synopsis":"Matt Damon reprises his role as the titular former CIA agent with a hazy past. Jason Bourne is the fifth installment in the action franchise, and the third to be directed by Paul Greengrass.","posters":{"thumbnail":"https://resizing.flixster.com/u-GC6uZyC8bpBUE553U4xNt6Ph0=/51x81/v1.bTsxMTU2MDMzODtqOzE3MTE2OzIwNDg7MzE1ODs1MDAw","profile":"https://resizing.flixster.com/u-GC6uZyC8bpBUE553U4xNt6Ph0=/51x81/v1.bTsxMTU2MDMzODtqOzE3MTE2OzIwNDg7MzE1ODs1MDAw","detailed":"https://resizing.flixster.com/u-GC6uZyC8bpBUE553U4xNt6Ph0=/51x81/v1.bTsxMTU2MDMzODtqOzE3MTE2OzIwNDg7MzE1ODs1MDAw","original":"https://resizing.flixster.com/u-GC6uZyC8bpBUE553U4xNt6Ph0=/51x81/v1.bTsxMTU2MDMzODtqOzE3MTE2OzIwNDg7MzE1ODs1MDAw"},"abridged_cast":[{"name":"Matt Damon","id":"162653499","characters":["Jason Bourne"]},{"name":"Julia Stiles","id":"162660056","characters":["Nicky Parsons"]},{"name":"Tommy Lee Jones","id":"162666788"},{"name":"Vincent Cassel","id":"162655150"},{"name":"Alicia Vikander","id":"771083890"}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771398975.json","alternate":"https://www.rottentomatoes.com/m/jason_bourne/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771398975/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771398975/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771398975/similar.json"}},{"id":"771436389","title":"Bad Moms","year":2016,"mpaa_rating":"R","runtime":101,"release_dates":{"theater":"2016-07-29"},"ratings":{"critics_score":-1,"audience_score":96},"synopsis":"In this new comedy from the grateful husbands and devoted fathers who wrote The Hangover, Amy has a seemingly perfect life--a great marriage, over-achieving kids, beautiful home and a career. However she's over-worked, over-committed and exhausted to the point that she's about to snap. Fed up, she joins forces with two other over-stressed moms on a quest to liberate themselves from conventional responsibilities - going on a wild, un-mom-like binge of long overdue freedom, fun and self-indulgence - putting them on a collision course with PTA Queen Bee Gwendolyn and her clique of devoted perfect moms.","posters":{"thumbnail":"https://resizing.flixster.com/djjkGYml5jES87lC-Gr6bIaWdVg=/54x80/v1.bTsxMjEyMjU5NTtqOzE3MDE1OzIwNDg7NTQ3OzgxMA","profile":"https://resizing.flixster.com/djjkGYml5jES87lC-Gr6bIaWdVg=/54x80/v1.bTsxMjEyMjU5NTtqOzE3MDE1OzIwNDg7NTQ3OzgxMA","detailed":"https://resizing.flixster.com/djjkGYml5jES87lC-Gr6bIaWdVg=/54x80/v1.bTsxMjEyMjU5NTtqOzE3MDE1OzIwNDg7NTQ3OzgxMA","original":"https://resizing.flixster.com/djjkGYml5jES87lC-Gr6bIaWdVg=/54x80/v1.bTsxMjEyMjU5NTtqOzE3MDE1OzIwNDg7NTQ3OzgxMA"},"abridged_cast":[{"name":"Mila Kunis","id":"364629418"},{"name":"Kristen Bell","id":"326395677"},{"name":"Christina Applegate","id":"162663389"},{"name":"Emjay Anthony","id":"771065531","characters":["Dylan"]},{"name":"Jay Jablonski","id":"395113139","characters":["Braden"]}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436389.json","alternate":"https://www.rottentomatoes.com/m/bad_moms/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436389/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436389/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771436389/similar.json"}},{"id":"771428882","title":"Into The Forest","year":2016,"mpaa_rating":"R","runtime":101,"release_dates":{"theater":"2016-07-29"},"ratings":{"critics_rating":"Fresh","critics_score":80,"audience_score":93},"synopsis":"A worldwide power outage sends the globe toward the brink of apocalypse, forcing two sisters living in their isolated house in the Canadian woods to adapt to their new reality and fight for survival in this stirring end-of-the-world thriller.","posters":{"thumbnail":"https://resizing.flixster.com/vjdq-N1WI6zMHTvDTIyWtyaMHBs=/54x80/v1.bTsxMjAyMTY0MjtqOzE3MDQxOzIwNDg7MTQyNTsyMTEx","profile":"https://resizing.flixster.com/vjdq-N1WI6zMHTvDTIyWtyaMHBs=/54x80/v1.bTsxMjAyMTY0MjtqOzE3MDQxOzIwNDg7MTQyNTsyMTEx","detailed":"https://resizing.flixster.com/vjdq-N1WI6zMHTvDTIyWtyaMHBs=/54x80/v1.bTsxMjAyMTY0MjtqOzE3MDQxOzIwNDg7MTQyNTsyMTEx","original":"https://resizing.flixster.com/vjdq-N1WI6zMHTvDTIyWtyaMHBs=/54x80/v1.bTsxMjAyMTY0MjtqOzE3MDQxOzIwNDg7MTQyNTsyMTEx"},"abridged_cast":[{"name":"Ellen Page","id":"326392013","characters":["Nell"]},{"name":"Evan Rachel Wood","id":"162653277","characters":["Eva"]},{"name":"Max Minghella","id":"162652282","characters":["Eli"]},{"name":"Callum Keith Rennie","id":"326433850","characters":["Robert"]},{"name":"Michael Eklund","id":"770691369","characters":["Stan"]}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771428882.json","alternate":"https://www.rottentomatoes.com/m/into_the_forest/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771428882/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771428882/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771428882/similar.json"}},{"id":"771435780","title":"Indignation","year":2016,"mpaa_rating":"R","runtime":110,"release_dates":{"theater":"2016-07-29"},"ratings":{"critics_rating":"Fresh","critics_score":80,"audience_score":86},"synopsis":"Based on Philip Roth's late novel, Indignation takes place in 1951, as Marcus Messner (Logan Lerman), a brilliant working class Jewish boy from Newark, New Jersey, travels on scholarship to a small, conservative college in Ohio, thus exempting him from being drafted into the Korean War. But once there, Marcus's growing infatuation with his beautiful classmate Olivia Hutton (Sarah Gadon), and his clashes with the college's imposing Dean, Hawes Caudwell (Tracy Letts), put his and his family's best laid plans to the ultimate test.","posters":{"thumbnail":"https://resizing.flixster.com/iXPmby3EJltgYV1GYQFTeXB1m50=/54x80/v1.bTsxMTk4OTYyNDtqOzE3MDE3OzIwNDg7NzE2OzEwNjE","profile":"https://resizing.flixster.com/iXPmby3EJltgYV1GYQFTeXB1m50=/54x80/v1.bTsxMTk4OTYyNDtqOzE3MDE3OzIwNDg7NzE2OzEwNjE","detailed":"https://resizing.flixster.com/iXPmby3EJltgYV1GYQFTeXB1m50=/54x80/v1.bTsxMTk4OTYyNDtqOzE3MDE3OzIwNDg7NzE2OzEwNjE","original":"https://resizing.flixster.com/iXPmby3EJltgYV1GYQFTeXB1m50=/54x80/v1.bTsxMTk4OTYyNDtqOzE3MDE3OzIwNDg7NzE2OzEwNjE"},"abridged_cast":[{"name":"Logan Lerman","id":"341816559","characters":["Marcus"]},{"name":"Sarah Gadon","id":"241691073","characters":["Olivia Hutton"]},{"name":"Ben Rosenfield (II)","id":"771418158","characters":["Bertram Flusser"]},{"name":"Linda Emond","id":"573371607","characters":["Esther"]},{"name":"Tracy Letts","id":"770901467","characters":["Dean Caudwell"]}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435780.json","alternate":"https://www.rottentomatoes.com/m/indignation/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435780/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435780/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435780/similar.json"}},{"id":"771435795","title":"Equity","year":2016,"mpaa_rating":"R","runtime":100,"release_dates":{"theater":"2016-07-29","dvd":"2016-07-29"},"ratings":{"critics_rating":"Fresh","critics_score":60,"audience_score":75},"synopsis":"A senior investment banker attempts to navigate the cutthroat world of Wall Street when a company's IPO threatens to derail the career she's built.","posters":{"thumbnail":"https://resizing.flixster.com/48-i8d4SXw8u32Y1OhKsS8B8R9k=/54x80/v1.bTsxMjAwNzY3NjtqOzE3MDI0OzIwNDg7MjAyNTszMDAw","profile":"https://resizing.flixster.com/48-i8d4SXw8u32Y1OhKsS8B8R9k=/54x80/v1.bTsxMjAwNzY3NjtqOzE3MDI0OzIwNDg7MjAyNTszMDAw","detailed":"https://resizing.flixster.com/48-i8d4SXw8u32Y1OhKsS8B8R9k=/54x80/v1.bTsxMjAwNzY3NjtqOzE3MDI0OzIwNDg7MjAyNTszMDAw","original":"https://resizing.flixster.com/48-i8d4SXw8u32Y1OhKsS8B8R9k=/54x80/v1.bTsxMjAwNzY3NjtqOzE3MDI0OzIwNDg7MjAyNTszMDAw"},"abridged_cast":[{"name":"Anna Gunn","id":"364610641","characters":["Naomi Bishop"]},{"name":"James Purefoy","id":"358182991","characters":["Michael Connor"]},{"name":"Sarah Megan Thomas","id":"770791861","characters":["Erin Manning"]},{"name":"Alysia Reiner","id":"748170240","characters":["Samantha"]},{"name":"Craig Bierko","id":"162694648","characters":["Benji Akers"]}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435795.json","alternate":"https://www.rottentomatoes.com/m/equity/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435795/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435795/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771435795/similar.json"}}],"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/lists/movies/upcoming.json?page_limit=16&country=us&page=1","alternate":"https://www.rottentomatoes.com/movie/upcoming"},"link_template":"//api.rottentomatoes.com/api/public/v1.0/lists/movies/upcoming.json?page_limit={results_per_page}&page={page_number}&country={country-code}"};
//        var movieSearch = {"total":48,"movies":[{"id":"771363115","title":"Batman v Superman: Dawn of Justice","year":2016,"mpaa_rating":"PG-13","runtime":151,"critics_consensus":"","release_dates":{"theater":"2016-03-23","dvd":"2016-07-19"},"ratings":{"critics_rating":"Rotten","critics_score":27,"audience_rating":"Upright","audience_score":66},"synopsis":"Batman (Ben Affleck) and Superman (Henry Cavill) share the screen in this Warner Bros./DC Entertainment co-production penned by David S. Goyer and Chris Terrio, and directed by Zack Snyder. Amy Adams and Diane Lane return as Lois Lane and Martha Kent, respectively.","posters":{"thumbnail":"https://resizing.flixster.com/-VpezhSWSYx54kmzqzQ55MLjufE=/54x80/v1.bTsxMTcxNDAxMztqOzE3MDI4OzIwNDg7NDA1MDs2MDAw","profile":"https://resizing.flixster.com/-VpezhSWSYx54kmzqzQ55MLjufE=/54x80/v1.bTsxMTcxNDAxMztqOzE3MDI4OzIwNDg7NDA1MDs2MDAw","detailed":"https://resizing.flixster.com/-VpezhSWSYx54kmzqzQ55MLjufE=/54x80/v1.bTsxMTcxNDAxMztqOzE3MDI4OzIwNDg7NDA1MDs2MDAw","original":"https://resizing.flixster.com/-VpezhSWSYx54kmzqzQ55MLjufE=/54x80/v1.bTsxMTcxNDAxMztqOzE3MDI4OzIwNDg7NDA1MDs2MDAw"},"abridged_cast":[{"name":"Ben Affleck","id":"162665891","characters":["Bruce Wayne/Batman"]},{"name":"Henry Cavill","id":"341817917","characters":["Clark Kent/Superman"]},{"name":"Amy Adams","id":"162653029","characters":["Lois Lane"]},{"name":"Diane Lane","id":"162652926","characters":["Martha Kent"]},{"name":"Laurence Fishburne","id":"162669090","characters":["Perry White"]}],"alternate_ids":{"imdb":"2975590"},"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/771363115.json","alternate":"https://www.rottentomatoes.com/m/batman_v_superman_dawn_of_justice/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/771363115/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/771363115/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/771363115/similar.json"}},{"id":"769959054","title":"The Dark Knight","year":2008,"mpaa_rating":"PG-13","runtime":152,"critics_consensus":"","release_dates":{"theater":"2008-07-18","dvd":"2008-12-09"},"ratings":{"critics_rating":"Certified Fresh","critics_score":94,"audience_rating":"Upright","audience_score":94},"synopsis":"","posters":{"thumbnail":"https://resizing.flixster.com/QEBHodYrJqWITX07bEBwBuK9A_Y=/54x81/v1.bTsxMTE2NTE2MDtqOzE3MTI0OzIwNDg7ODAwOzEyMDA","profile":"https://resizing.flixster.com/QEBHodYrJqWITX07bEBwBuK9A_Y=/54x81/v1.bTsxMTE2NTE2MDtqOzE3MTI0OzIwNDg7ODAwOzEyMDA","detailed":"https://resizing.flixster.com/QEBHodYrJqWITX07bEBwBuK9A_Y=/54x81/v1.bTsxMTE2NTE2MDtqOzE3MTI0OzIwNDg7ODAwOzEyMDA","original":"https://resizing.flixster.com/QEBHodYrJqWITX07bEBwBuK9A_Y=/54x81/v1.bTsxMTE2NTE2MDtqOzE3MTI0OzIwNDg7ODAwOzEyMDA"},"abridged_cast":[{"name":"Christian Bale","id":"162652645","characters":["Batman/Bruce Wayne"]},{"name":"Heath Ledger","id":"162652588","characters":["The Joker"]},{"name":"Aaron Eckhart","id":"162668655","characters":["Harvey Dent"]},{"name":"Maggie Gyllenhaal","id":"162663906","characters":["Rachel Dawes"]},{"name":"Gary Oldman","id":"162652649","characters":["Lt. James Gordon"]}],"alternate_ids":{"imdb":"0468569"},"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/769959054.json","alternate":"https://www.rottentomatoes.com/m/the_dark_knight/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/769959054/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/769959054/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/769959054/similar.json"}},{"id":"1122","title":"Batman Begins","year":2005,"mpaa_rating":"PG-13","runtime":140,"critics_consensus":"","release_dates":{"theater":"2005-06-14","dvd":"2005-10-18"},"ratings":{"critics_rating":"Certified Fresh","critics_score":84,"audience_rating":"Upright","audience_score":94},"synopsis":"","posters":{"thumbnail":"https://resizing.flixster.com/oR6L8E3_WYevT9eEIF04M_a3W18=/54x81/v1.bTsxMTE2NTI2MjtqOzE3MTM2OzIwNDg7ODAwOzEyMDA","profile":"https://resizing.flixster.com/oR6L8E3_WYevT9eEIF04M_a3W18=/54x81/v1.bTsxMTE2NTI2MjtqOzE3MTM2OzIwNDg7ODAwOzEyMDA","detailed":"https://resizing.flixster.com/oR6L8E3_WYevT9eEIF04M_a3W18=/54x81/v1.bTsxMTE2NTI2MjtqOzE3MTM2OzIwNDg7ODAwOzEyMDA","original":"https://resizing.flixster.com/oR6L8E3_WYevT9eEIF04M_a3W18=/54x81/v1.bTsxMTE2NTI2MjtqOzE3MTM2OzIwNDg7ODAwOzEyMDA"},"abridged_cast":[{"name":"Christian Bale","id":"162652645","characters":["Bruce Wayne/Batman"]},{"name":"Michael Caine","id":"162652646","characters":["Alfred"]},{"name":"Liam Neeson","id":"162652242","characters":["Henri Ducard"]},{"name":"Katie Holmes","id":"162652648","characters":["Rachel Dawes"]},{"name":"Gary Oldman","id":"162652649","characters":["Jim Gordon"]}],"alternate_ids":{"imdb":"0372784"},"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/1122.json","alternate":"https://www.rottentomatoes.com/m/batman_begins/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/1122/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/1122/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/1122/similar.json"}},{"id":"10483","title":"Batman","year":1989,"mpaa_rating":"PG-13","runtime":126,"critics_consensus":"","release_dates":{"theater":"1989-06-23","dvd":"1997-03-25"},"ratings":{"critics_rating":"Fresh","critics_score":72,"audience_rating":"Upright","audience_score":84},"synopsis":"","posters":{"thumbnail":"https://resizing.flixster.com/_fryiiaptXT55dnaQpm0JJITVuc=/54x81/v1.bTsxMTE2ODA4ODtqOzE3MTI3OzIwNDg7ODAwOzEyMDA","profile":"https://resizing.flixster.com/_fryiiaptXT55dnaQpm0JJITVuc=/54x81/v1.bTsxMTE2ODA4ODtqOzE3MTI3OzIwNDg7ODAwOzEyMDA","detailed":"https://resizing.flixster.com/_fryiiaptXT55dnaQpm0JJITVuc=/54x81/v1.bTsxMTE2ODA4ODtqOzE3MTI3OzIwNDg7ODAwOzEyMDA","original":"https://resizing.flixster.com/_fryiiaptXT55dnaQpm0JJITVuc=/54x81/v1.bTsxMTE2ODA4ODtqOzE3MTI3OzIwNDg7ODAwOzEyMDA"},"abridged_cast":[{"name":"Michael Keaton","id":"162652681","characters":["Batman/Bruce Wayne"]},{"name":"Jack Nicholson","id":"162654979","characters":["The Joker/Jack Napier"]},{"name":"Kim Basinger","id":"162664684","characters":["Vicki Vale"]},{"name":"Robert Wuhl","id":"162695355","characters":["Alexander Knox"]},{"name":"Pat Hingle","id":"162658858","characters":["Commissioner Gordon"]}],"alternate_ids":{"imdb":"0096895"},"links":{"self":"https://api.rottentomatoes.com/api/public/v1.0/movies/10483.json","alternate":"https://www.rottentomatoes.com/m/1001781-batman/","cast":"https://api.rottentomatoes.com/api/public/v1.0/movies/10483/cast.json","reviews":"https://api.rottentomatoes.com/api/public/v1.0/movies/10483/reviews.json","similar":"https://api.rottentomatoes.com/api/public/v1.0/movies/10483/similar.json"}}],"links":{"self":"https:https://api.rottentomatoes.com/api/public/v1.0/movies.json?q=batma&page_limit=4&page=1","next":"https:https://api.rottentomatoes.com/api/public/v1.0/movies.json?q=batma&page_limit=4&page=2"},"link_template":"//api.rottentomatoes.com/api/public/v1.0/movies.json?q={search-term}&page_limit={results-per-page}&page={page-number}"};
//        /*****************************************************************************************************
//         * HTTP BACKEND WHENS
//         *****************************************************************************************************/
//            //$httpBackend.whenGET(/api\//)
//            //    .passThrough();
//        $httpBackend.whenGET(/</)
//            .passThrough();
//        $httpBackend.whenPUT(/api\//)
//            .passThrough();
//        $httpBackend.whenPOST(/api\//)
//            .passThrough();
//        $httpBackend.whenDELETE(/api\//)
//            .passThrough();
//
//        const jsonpApis = [
//            ['http://api.rottentomatoes.com/api/public/v1.0/lists/movies/upcoming.json?apikey=u89xcs2pkzy49hwmf9f43j8y&callback=JSON_CALLBACK', upcomingMovies],
//            [/api.rottentomatoes.com\/api\/public\/v1.0\/movies.json/, movieSearch]
//        ];
//        const getApis =[
//            ['https://api.themoviedb.org/3/find/tt2975590?external_source=imdb_id&api_key=98a62afbdaaba0e0968f74212a9f7561', batmanSupermanInfo],
//            ['https://api.themoviedb.org/3/find/tt0468569?external_source=imdb_id&api_key=98a62afbdaaba0e0968f74212a9f7561', darkKnightInfo],
//            ['https://api.themoviedb.org/3/find/tt0372784?external_source=imdb_id&api_key=98a62afbdaaba0e0968f74212a9f7561', batmanBeginsInfo],
//            ['https://api.themoviedb.org/3/find/tt0096895?external_source=imdb_id&api_key=98a62afbdaaba0e0968f74212a9f7561', batmanInfo],
//            [/api.themoviedb.org\/3\/find\//],
//            ['https://api.themoviedb.org/3/movie/209112/videos?api_key=98a62afbdaaba0e0968f74212a9f7561&adult=false', batmanSupermanVid],
//            ['https://api.themoviedb.org/3/movie/155/videos?api_key=98a62afbdaaba0e0968f74212a9f7561&adult=false', darkKnightVid],
//            ['https://api.themoviedb.org/3/movie/272/videos?api_key=98a62afbdaaba0e0968f74212a9f7561&adult=false', batmanBeginsVid],
//            ['https://api.themoviedb.org/3/movie/268/videos?api_key=98a62afbdaaba0e0968f74212a9f7561&adult=false', batmanVid],
//            [/api\/asg-mtg-msny\/conf-comments\//],
//
//            //UTIL
//            [/util\/api\//],
//            //Modal Templates
//            [/src/]
//        ];
//
//        const otherApis = [
//            ['api/schedule/10566', {}, {}]
//        ];
//
//        function createWhens(isInTest) {
//            createWhenGets(isInTest);
//            createWhenJSONP(isInTest);
//        }
//
//        function createWhenGets(isInTest) {
//            if(isInTest) {
//                angular.forEach(getApis, function (api) {
//                    //(api[1])? $httpBackend.expectGET(api[0]).respond(api[1]) : '';
//                    (api[1])? $httpBackend.whenGET(api[0]).respond(api[1]) : $httpBackend.whenGET(api[0]).passThrough();
//                })
//            } else {
//                $httpBackend.whenGET(/\//).passThrough();
//            }
//        }
//
//        function createWhenJSONP(isInTest) {
//            if(isInTest) {
//                angular.forEach(jsonpApis, function (api) {
//                    //(api[1])? $httpBackend.expectGET(api[0]).respond(api[1]) : '';
//                    (api[1])? $httpBackend.whenJSONP(api[0]).respond(api[1]) : $httpBackend.whenJSONP(api[0]).passThrough();
//                })
//            } else {
//                $httpBackend.whenJSONP(/api\//).passThrough();
//            }
//        }
//
//        function runExpectWhen(httpMethod, api, data, responseStatus) {
//            if(!responseStatus) { responseStatus = 200; }
//            var allApis = getApis.concat(otherApis);
//            for(var i = 0; i < allApis.length; i++) {
//                var apiURL = allApis[i][0];
//                var apiData = allApis[i][1];
//                var apiFailData = allApis[i][2];
//                if (String(apiURL) == String(api)){
//                    return $httpBackend.expect(httpMethod, apiURL, data).respond(responseStatus, (responseStatus == 200) ? apiData : apiFailData);
//                }
//            }
//        }
//        return {
//            setupBackend: createWhens,
//            runExpectWhen: runExpectWhen
//        };
//    }
//})();

/**
 * Created by ericjohndixon on 7/1/16.
 */
(function () {
    'use strict';

    angular
        .module('mooVtrailers.core')
        .factory('MovieDataService', movieDataService);
    movieDataService.$inject = ['RottenTomatoesService', 'TmdbService', '$q'];

    //FACTORY METHOD
    function movieDataService(RottenTomatoesService, TmdbService, $q) {
        return {
            getMoviesByQuery : getMoviesByQuery,
            getUpcomingMovies: getUpcomingMovies
        };
        /////////////////////////////////////////////////////////
        function getMoviesByQuery(searchString) {
            return RottenTomatoesService.getMoviesByQuery(searchString).then(getAllMoviesTMDBInfo);

            function getAllMoviesTMDBInfo(response) {
                if (response.data.movies) {
                    response.data.movies.forEach(function (movie) {
                        getTMDBMovieInfo(movie);
                    });
                }
                return response;
            }
        }

        //TODO: Figure out why this doesn't work. I am guessing that I hit the Rotten Tomatoes request limit
        function getUpcomingMovies() {
            return RottenTomatoesService.getUpcomingMovies().then(getAllMoviesTMDBInfo);
            function getAllMoviesTMDBInfo(response) {
                var movies = [];
                if (response.data.movies) {
                    var promises = [];
                    response.data.movies.forEach(function (movie) {
                        promises.push(RottenTomatoesService.getMovieById(movie.id).then(function(movieObject) {
                            movies.push(getTMDBMovieInfo(movieObject));
                        }));
                    });
                }
                return $q.all(promises).then(function(){
                    return movies;
                });
            }
        }

        function getTMDBMovieInfo(movie) {
            if (movie.alternate_ids) { // then IMDB id exists
                TmdbService.getMovieByIMDBId(movie.alternate_ids.imdb).then(function (response) {
                    if (response.data.movie_results.length > 0) {
                        getTMDBMovieParts(response.data.movie_results[0]);
                    } else {
                        if (movie.year >= 2016) { //sometimes the imdb info hasn't been associated yet
                            TmdbService.getMoviesByQuery(movie.title).then(function (response) {
                                var tmdbResult = (response.data.results) ? response.data.results[0] : null;
                                if (movie.year == parseInt(tmdbResult.release_date.substr(0, tmdbResult.release_date.indexOf('-'))) &&
                                    tmdbResult.title == movie.title) {
                                    getTMDBMovieParts(tmdbResult);
                                }

                            })
                        }
                    }
                })
            }
            else {
                movie.hasTrailer = false;
            }

            function getTMDBMovieParts(tmdbResult) {
                getTMDBMoviePosters(tmdbResult);
                getTMDBMovieTrailers(tmdbResult.id);
                getTMDBMovieOverview(tmdbResult);
            }

            function getTMDBMoviePosters(tmdbMovieItem) {
                movie.highResPoster = tmdbMovieItem.poster_path;
                movie.backdrop = tmdbMovieItem.backdrop_path;
            }

            function getTMDBMovieTrailers(id) {
                TmdbService.getMovieTrailerById(id).then(function (response) {
                    movie.trailers = response.data.results.filter(function (mediaItem) {
                        return (mediaItem.site == 'YouTube' && mediaItem.type == 'Trailer')
                    });
                    movie.hasTrailer = movie.trailers.length > 0;
                });
            }

            function getTMDBMovieOverview(tmdbMovieItem) {
                movie.synopsis = tmdbMovieItem.overview;
            }

            return movie;
        }
    }
})();
(function () {
  'use strict';

  angular.module('mooVtrailers.core')
    .directive('mtMessage', ['MtMessageService', function (MtMessageService) {
      return {
          restrict: 'E',
          link: linker,
          template: '<div class="mt-message" ng-class="{\'mt-message-show\' : messageService.message}">{{messageService.message}}</div>'
      };

      ////////////////////////////////////////////////////
      function linker(scope, element, attrs) {
        scope.messageService = MtMessageService;
      }

    }]);
})();
(function () {
    'use strict';

    angular
        .module('mooVtrailers.core')
        .factory('MtMessageService', MtMessageService);
    MtMessageService.$inject = ['$timeout'];
    
    //FACTORY METHOD
    function MtMessageService($timeout) {
        return {
            showMessage: showMessage,
            message : ''
        };
        /////////////////////////////////////////////////////////

        function showMessage(message, duration) {
            this.message = message;

            var resetMessage = function() {
                this.message = '';
            };

            $timeout(resetMessage.bind(this), duration);
        }
    }
})();
/**
 * Created by ericjohndixon on 6/10/16.
 */
(function () {
  'use strict';

  angular.module('mooVtrailers.core')
    .directive('offElementClick', ['$document', function ($document) {
      return {
        restrict: 'A',
        link: linker
      };

      ////////////////////////////////////////////////////
      function linker($scope, $element, $attributes) {
          var scopeExpression = $attributes.offElementClick,
              onDocumentClick = function (event) {
                  var isChild = jQuery($element).find(event.target).length > 0;

                  if (!isChild) {
                      $scope.$apply(scopeExpression);
                  }
              };

          $document.on("click", onDocumentClick);

          $element.on('$destroy', function () {
              $document.off("click", onDocumentClick);
          });

      }

    }]);
})();
/**
 * Created by ericjohndixon on 6/2/16.
 */
(function () {
    'use strict';

    angular
        .module('mooVtrailers.apiServices')
        .factory('RottenTomatoesService', RottenTomatoesService);
    RottenTomatoesService.$inject = ['HttpHelper'];
    
    //FACTORY METHOD
    function RottenTomatoesService(HttpHelper) {
        return {
            getMoviesByQuery : getMoviesByQuery,
            getMovieById: getMovieById,
            getUpcomingMovies: getUpcomingMovies
        };
        /////////////////////////////////////////////////////////    


        function getMoviesByQuery(queryString) {
            return HttpHelper.jsonp('http://api.rottentomatoes.com/api/public/v1.0/movies.json?apikey=u89xcs2pkzy49hwmf9f43j8y&q=' + queryString + '&page_limit=4&callback=JSON_CALLBACK', true, 'movie-query');
        }

        function getMovieById(id) {
            return HttpHelper.jsonp('http://api.rottentomatoes.com/api/public/v1.0/movies/' + id + '.json?apikey=u89xcs2pkzy49hwmf9f43j8y&callback=JSON_CALLBACK', true, 'movie-query');
        }

        function getUpcomingMovies() {
            return HttpHelper.jsonp('http://api.rottentomatoes.com/api/public/v1.0/lists/movies/upcoming.json?apikey=u89xcs2pkzy49hwmf9f43j8y&callback=JSON_CALLBACK', true, 'upcoming-movies');
        }
    }
})();
/**
 * Created by ericjohndixon on 6/16/16.
 */
(function () {
    'use strict';

    angular
        .module('mooVtrailers.apiServices')
        .factory('TmdbService', TmdbService);
    TmdbService.$inject = ['HttpHelper'];

    //FACTORY METHOD
    function TmdbService(HttpHelper) {
        return {
            getMoviesByQuery: getMoviesByQuery,
            getMovieByIMDBId: getMovieByIMDBId,
            getMovieTrailerById: getMovieTrailerById,
            getUpcomingMovies: getUpcomingMovies
        };
        /////////////////////////////////////////////////////////
        function getMoviesByQuery(query) {
            return HttpHelper.get('http://api.themoviedb.org/3/search/movie?api_key=98a62afbdaaba0e0968f74212a9f7561&include_adult=false&query=' + query);
        }

        function getMovieByIMDBId(imdbId) {
            return HttpHelper.get('https://api.themoviedb.org/3/find/tt' + imdbId + '?external_source=imdb_id&api_key=98a62afbdaaba0e0968f74212a9f7561');
        }

        function getMovieTrailerById(id) {
            return HttpHelper.get('https://api.themoviedb.org/3/movie/' + id + '/videos?api_key=98a62afbdaaba0e0968f74212a9f7561&adult=false');
        }

        function getUpcomingMovies() {
            return HttpHelper.get('https://api.themoviedb.org/3/movie/upcoming?api_key=98a62afbdaaba0e0968f74212a9f7561&adult=false');
        }
    }
})();
/**
 * Created by ericjohndixon on 6/2/16.
 */
(function () {
    'use strict';

    angular
        .module('mooVtrailers.apiServices')
        .factory('YouTubeService', YouTubeService);
    YouTubeService.$inject = ['HttpHelper', '$window'];

    //FACTORY METHOD
    function YouTubeService(HttpHelper, $window) {
        var player;
        init();
        return {
            getYouTubeByQuery : getYouTubeByQuery,
            getYouTubeIdByMovieItem: getYouTubeIdByMovieItem,
            playVideoById : playVideoById
        };
        /////////////////////////////////////////////////////////
        //TODO: Remove related videos after trailer finishes
        function getYouTubeByQuery(queryString) {
            return HttpHelper.jsonp('https://www.googleapis.com/youtube/v3/search?part=snippet&q=' + queryString  + '&key=AIzaSyCcE9Fjlo5d-4gpRJkZ97a7KFB2k8pvcaM&callback=JSON_CALLBACK', true, 'youtube-query');
        }

        function getYouTubeIdByMovieItem(movie) {
            var queryString = movie.title + ' (' + movie.year + ') trailer';
            return getYouTubeByQuery(queryString).then(function(response){
                return extractKey(movie, response);
            });
        }

        function extractKey(movie, response) {
            //Look at all results
            var youtubeItems = response.data.items;
            for(var i = 0; i < youtubeItems.length; i++) {
                var titleCompareString = youtubeItems[i].snippet.title.toLowerCase();
                if(titleCompareString.includes(movie.title.toLowerCase()) && titleCompareString.includes(movie.year.toString().toLowerCase()) && titleCompareString.includes('trailer')){
                    return youtubeItems[i].id.videoId;
                }
            }
            return 'No trailer found';
        }

        function playVideoById(id) {
            player.loadVideoById(id);
        }

        /*****************************************************************************************************
         * INIT
         *****************************************************************************************************/
         function init() {
            //height: '550',
            //    width: '1100'
            $window.onYouTubeIframeAPIReady = function() {
                player = new YT.Player('player', {
                    height: '390',
                    width: '640'
                });
            };
        }
        //"items": [
        //    {
        //        "kind": "youtube#searchResult",
        //        "etag": "\"mie-I9wWQF7ndS7wC10DLBkzLlg/-UURu2szaOIX4O6Uq1IxiM5p9JQ\"",
        //        "id": {
        //            "kind": "youtube#video",
        //            "videoId": "GokKUqLcvD8"
        //        },
        //        "snippet": {
        //            "publishedAt": "2011-12-19T18:17:09.000Z",
        //            "channelId": "UCkR0GY0ue02aMyM-oxwgg9g",
        //            "title": "The Dark Knight Rises Official Movie Trailer Christian Bale, Batman Movie (2012) HD",
        //            "description": "Subscribe to TRAILERS: http://bit.ly/sxaw6h Subscribe to COMING SOON: http://bit.ly/H2vZUn Like us on FACEBOOK: http://goo.gl/dHs73 Follow us on ...",
        //            "thumbnails": {
        //                "default": {
        //                    "url": "https://i.ytimg.com/vi/GokKUqLcvD8/default.jpg",
        //                    "width": 120,
        //                    "height": 90
        //                },
        //                "medium": {
        //                    "url": "https://i.ytimg.com/vi/GokKUqLcvD8/mqdefault.jpg",
        //                    "width": 320,
        //                    "height": 180
        //                },
        //                "high": {
        //                    "url": "https://i.ytimg.com/vi/GokKUqLcvD8/hqdefault.jpg",
        //                    "width": 480,
        //                    "height": 360
        //                }
        //            },
        //            "channelTitle": "Movieclips Coming Soon",
        //            "liveBroadcastContent": "none"
        //        }
        //    },
    }
})();
/**
 * Created by ericjohndixon on 6/1/16.
 */
(function () {
  'use strict';

  angular.module('mooVtrailers')
    .directive('youtubePlayer', ['$window', '$rootScope', function ($window, $rootScope) {
        return {
            restrict: 'E',
            link: linker,
            template: '<section id="player"></section>'
        };

        function linker(scope, element, attr) {

            // 3. This function creates an <iframe> (and YouTube player)
            scope.loadNewVideo = loadNewVideo;
            //    after the API code downloads.

            scope.$on('play-queue', function(event, args) {
                loadNewVideo(args);
                // do what you want to do
            });

            //height: '390',
            //width: '640',
            var player;
            //$window.onYouTubeIframeAPIReady = function() {
            //    player = new YT.Player('player', {
            //        height: '550',
            //        width: '1100',
            //        videoId: 'M7lc1UVf-VE',
            //        events: {
            //            'onReady': onPlayerReady,
            //            'onStateChange': onPlayerStateChange
            //        }
            //    });
            //};

            // 4. The API will call this function when the video player is ready.
            $window.onPlayerReady = function (event) {
                //event.target.playVideo();
            };

            // 5. The API calls this function when the player's state changes.
            //    The function indicates that when playing a video (state=1),
            //    the player should play for six seconds and then stop.
            var done = false;
            $window.onPlayerStateChange = function (event) {
                if (event.data == YT.PlayerState.PLAYING && !done) {
                    setTimeout(stopVideo, 6000);
                    done = true;
                }
            };
            function stopVideo() {
                player.stopVideo();
            }

            function loadNewVideo(id) {
                player.loadVideoById(id);
                //player.loadPlaylist(['UgBBitvVHAg', 'EXeTwQWrcwY']);
            }


        }
    }])
})();

angular.module("mooVtrailers").run(["$templateCache", function($templateCache) {$templateCache.put("app/components/movie-search-item/movie-search-item-tpl.html","<!--DESKTOP VERSION-->\n<section class=\"mt-container mt-container--gray movie-search-item\" hide-xs>\n\n    <mt-poster ng-click=\"playQueue()\"\n               has-trailer=\"movie.hasTrailer\"\n               p-src=\"{{(movie.highResPoster) ? \'http://image.tmdb.org/t/p/w185/\' + movie.highResPoster : movie.posters.original}}\"\n               p-width=\"102px\"\n               p-height=\"153px\"\n               elevation=\"4\"></mt-poster>\n\n    <!--MOVIE SEARCH ITEM DETAILS CONTAINER-->\n    <section class=\"movie-search-item__details--container\">\n        <!--MOVIE SEARCH ITEM DETAILS-->\n        <div class=\"movie-search-item__details\">\n            <div class=\"heading-4\">{{movie.title}} ({{movie.year}}) </div>\n\n            <div class=\"movie-search-item__synopsis\">\n                <span ng-if=\"movie.synopsis\">\n                    {{movie.synopsis}}\n                </span>\n                <span ng-if=\"!movie.synopsis\">\n                    (No synopsis available)\n                </span>\n            </div>\n        </div>\n        <div class=\"movie-search-item__last-section\">\n            <div class=\"flex-end-to-end\">\n                <div class=\"movie-search-item__mpaa-rating\">{{movie.mpaa_rating}}</div>\n                <div class=\"movie-search-item__add icon__clickable--white\" ng-if=\"movie.hasTrailer\">\n                    <i class=\"fa fa-plus-circle\"></i>\n                </div>\n            </div>\n\n            <div class=\"movie-search-item__ratings\">\n                <!--CRITICS RATING-->\n                <div class=\"icon-responsive\"\n                     ng-class=\"{\'icon--tomato\' : movie.ratings.critics_rating == \'Fresh\',\n                     \'icon--rotten-tomato\' : movie.ratings.critics_rating == \'Rotten\',\n                     \'icon--certified-fresh\' : movie.ratings.critics_rating == \'Certified Fresh\'}\"\n                     ng-if=\"movie.ratings.critics_score != -1\">\n                </div>\n                <div class=\"movie-search-item__rating-percent\" ng-if=\"movie.ratings.critics_score != -1\"> {{movie.ratings.critics_score}}%</div>\n\n                <!--AUDIENCE RATING-->\n                <div class=\"icon-responsive icon--popcorn\"\n                     ng-class=\"{\'icon--popcorn\' : movie.ratings.audience_rating == \'Upright\',\n                     \'icon--tipped-popcorn\' : movie.ratings.audience_rating == \'Spilled\'}\"\n                     ng-if=\"movie.ratings.audience_score != -1\"></div>\n                <div class=\"movie-search-item__rating-percent\" ng-if=\"movie.ratings.audience_score != -1\">{{movie.ratings.audience_score}}%</div>\n            </div>\n        </div>\n    </section>\n\n</section>\n\n<!--MOBILE VERSION-->\n<section class=\"mt-relative-container\" hide-gt-xs ng-init=\"showInfo = false\">\n    <section class=\"movie-search-item__info-icon\">\n        <i class=\"fa fa-info-circle\" ng-class=\"{\'rotate-45-deg\': showInfo}\" ng-click=\"showInfo = !showInfo\"></i>\n    </section>\n\n\n    <section class=\"mt-container--gray overflow-hidden position-relative\" >\n        <section class=\"movie-search-item__details--container\" ng-click=\"(movie.hasTrailer) ? playQueue() : showNoTrailerMessage()\">\n            <div class=\"heading-5\">{{movie.title}} ({{movie.year}}) </div>\n        </section>\n\n        <!--RATINGS / ADD ICON-->\n        <section class=\"movie-search-item__information \" ng-class=\"{\'movie-search-item__information--hide-right\' : !showInfo}\">\n\n            <div class=\"movie-search-item__ratings\">\n                <!--ADD ICON-->\n                <div class=\"movie-search-item__add-icon\"><i class=\"fa fa-plus-circle\"></i></div>\n\n                <!--CRITICS RATING-->\n                <div class=\"icon-responsive\"\n                     ng-class=\"{\'icon--tomato\' : movie.ratings.critics_rating == \'Fresh\',\n                 \'icon--rotten-tomato\' : movie.ratings.critics_rating == \'Rotten\',\n                 \'icon--certified-fresh\' : movie.ratings.critics_rating == \'Certified Fresh\'}\"\n                     ng-if=\"movie.ratings.critics_score != -1\">\n                </div>\n                <div class=\"movie-search-item__rating-percent\" ng-if=\"movie.ratings.critics_score != -1\"> {{movie.ratings.critics_score}}%</div>\n\n                <!--AUDIENCE RATING-->\n                <div class=\"icon-responsive icon--popcorn\"\n                     ng-class=\"{\'icon--popcorn\' : movie.ratings.audience_rating == \'Upright\',\n                 \'icon--tipped-popcorn\' : movie.ratings.audience_rating == \'Spilled\'}\"\n                     ng-if=\"movie.ratings.audience_score != -1\"></div>\n                <div class=\"movie-search-item__rating-percent\" ng-if=\"movie.ratings.audience_score != -1\">{{movie.ratings.audience_score}}%</div>\n\n            </div>\n        </section>\n    </section>\n</section>");
$templateCache.put("app/components/mt-header/mt-header-tpl.html","<section class=\"mt-header\"\n         ng-class=\"{\'header--flex\' : theater.searchOnTop}\">\n    <mt-logo hide-gt-xs is-minimal-version=\"theater.searchOnTop\"></mt-logo>\n    <mt-logo hide-xs></mt-logo>\n\n    <!--SEARCH ICON-->\n    <span class=\"mt-header-search-icon\" hide-gt-xs ng-if=\"!theater.searchOnTop\" ng-click=\"theater.searchOnTop = true\"><i class=\"fa fa-search\"></i></span>\n    <mt-search-bar></mt-search-bar>\n\n\n    <!--TODO: Use for bottom sheet-->\n    <!--<md-sidenav md-component-id=\"left\" class=\"md-sidenav-left\">-->\n        <!--Left Nav!-->\n    <!--</md-sidenav>-->\n    <!--<md-content>-->\n        <!--Center Content-->\n        <!--<md-button ng-click=\"openLeftMenu()\">-->\n            <!--Open Left Menu-->\n        <!--</md-button>-->\n    <!--</md-content>-->\n    <!--<md-sidenav md-component-id=\"right\" md-is-locked-open=\"$mdMedia(\'min-width: 333px\')\" class=\"md-sidenav-right\">-->\n        <!--<form>-->\n            <!--<md-input-container>-->\n                <!--<label for=\"testInput\">Test input</label>-->\n                <!--<input id=\"testInput\" type=\"text\" ng-model=\"data\" md-autofocus>-->\n            <!--</md-input-container>-->\n        <!--</form>-->\n    <!--</md-sidenav>-->\n\n</section>");
$templateCache.put("app/components/mt-popular-titles/mt-popular-titles-tpl.html","<section class=\"inner-padding--small--left\">\n    <h2>Upcoming Movies</h2>\n    <section class=\"mt-popular-titles__container\">\n        <!--TODO: add arrows to swipe titles on desktop-->\n        <mt-poster ng-repeat=\"upcomingMovie in mtPopularTitles.upcomingMovies\"\n                   ng-if=\"upcomingMovie.hasTrailer\"\n                   ng-click=\"mtPopularTitles.playQueue(upcomingMovie.trailers)\"\n                   has-trailer=\"upcomingMovie.hasTrailer\"\n                   p-src=\"{{\'http://image.tmdb.org/t/p/w185/\' + upcomingMovie.poster_path}}\"\n                   class=\"mt-poster-container\"\n                   elevation=\"4\"\n                   p-width=\"102px\"\n                   p-height=\"153px\">\n        </mt-poster>\n    </section>\n</section>");
$templateCache.put("app/components/mt-poster/mt-poster-tpl.html","<section class=\"mt-poster\" >\n    <span ng-if=\"hasTrailer\"><i class=\"fa fa-play-circle icon__clickable--white\"></i></span>\n    <span ng-if=\"!hasTrailer\" class=\"poster-action\">No Trailer Available</span>\n\n    <img width=\"{{width}}\" height=\"{{height}}\" class=\"{{\'md-whiteframe-\' + elevation +\'dp\'}}\" ng-src=\"{{pSrc}}\">\n</section>");
$templateCache.put("app/components/mt-search-bar/mt-search-bar-tpl.html","\n<section class=\"mt-search-bar\" ng-class=\"{\'initial-search-bar\': !theater.searchOnTop}\" off-element-click=\"mtSearchBar.hideResults = true\">\n    <!--Search Input-->\n    <h1 ng-if=\"!theater.searchOnTop\" hide-xs>Search Movie Trailers</h1>\n    <input id=\"mt-search-input\"\n           hide-xs\n           autofocus\n           class=\"input__main--large\"\n           type=\"text\"\n           ng-model=\"mtSearchBar.searchString\"\n           ng-focus=\"mtSearchBar.hideResults = false\"\n           placeholder=\"Enter Title\"\n           ng-change=\"theater.searchOnTop = true; mtSearchBar.search()\">\n\n    <input id=\"mt-mobile-search-input\"\n           hide-gt-xs\n           class=\"input__main--large \"\n           type=\"text\"\n           ng-model=\"mtSearchBar.searchString\"\n           ng-focus=\"mtSearchBar.hideResults = false\"\n           placeholder=\"Enter Title\"\n           ng-show=\"theater.searchOnTop\"\n           ng-change=\"mtSearchBar.search()\">\n\n\n    <!--Movie Trailer Search Results-->\n    <section class=\"mt-search-results__container\" ng-hide=\"mtSearchBar.hideResults\" ng-if=\"mtSearchBar.searchString != \'\'\">\n        <div class=\"mt-container__spacer\" ng-repeat=\"movie in mtSearchBar.movies\">\n            <movie-search-item movie=\"movie\" ></movie-search-item>\n        </div>\n    </section>\n</section>");
$templateCache.put("app/components/mt-theater/mt-theater-tpl.html","\n<section class=\"mt-video-container\" ng-class=\"{\'mobile-hidden\': !mtTheater.theater.showTheater}\">\n    <div>\n        <section id=\"player\"></section>\n    </div>\n\n</section>\n<!--<button ng-click=\"openBottomSheet()\">Open Bottom Sheet</button>-->");}]);
//# sourceMappingURL=mooVtrailers.1.0.0-0.min.js.map
