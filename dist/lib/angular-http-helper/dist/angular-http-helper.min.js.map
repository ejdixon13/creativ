{"version":3,"sources":["angular-http-helper.js"],"names":["HttpHelper","$http","UrlCache","getMethod","url","willCache","cacheSetName","addUrl","get","cache","postMethod","data","cacheSetNames","deleteUrlCache","post","putMethod","put","deleteMethod","jsonpMethond","jsonp","delete","$cacheFactory","cacheSets","deleteUrlCacheByUrl","name","urlCache","remove","urlItems","Array","isArray","i","length","deleteUrlCacheByName","forEach","reset","deleteAllUrlCache","add","getSet","sets","resetSet","push","removeUrl","splice","angular","module","factory","$inject"],"mappings":"CAGA,WACI,YAaA,SAASA,GAAWC,EAAOC,GAcvB,QAASC,GAAUC,EAAKC,EAAWC,GAG/B,MAFAD,GAAY,EAAcA,GAAY,EACtCD,EAAM,EAAiBF,EAASK,OAAOD,EAAcF,GAAOA,EACrDH,EAAMO,IAAIJ,GAAMK,MAAOJ,IAMlC,QAASK,GAAWN,EAAKO,EAAMC,GAE3B,MADA,GAAkBV,EAASW,eAAeD,GAAiB,GACpDX,EAAMa,KAAKV,EAAKO,GAM3B,QAASI,GAAUX,EAAKO,EAAMC,GAE1B,MADA,GAAkBV,EAASW,eAAeD,GAAiB,GACpDX,EAAMe,IAAIZ,EAAKO,GAM1B,QAASM,GAAab,EAAKQ,GAEvB,MADA,GAAkBV,EAASW,eAAeD,GAAiB,GACpDX,EAAAA,UAAaG,GAMvB,QAASc,GAAad,EAAKC,EAAWC,GAGnC,MAFAD,GAAY,EAAcA,GAAY,EACtCD,EAAM,EAAiBF,EAASK,OAAOD,EAAcF,GAAOA,EACrDH,EAAMkB,MAAMf,GAAMK,MAAOJ,IAjDpC,OACIG,IAAKL,EACLW,KAAMJ,EACNM,IAAKD,EACLK,SAAQH,EACRE,MAAOD,GAqDf,QAAShB,GAASmB,EAAeC,GAc7B,QAASC,GAAoBC,EAAMpB,GAC3BqB,EAASjB,IAAIgB,KACbH,EAAcb,IAAI,SAASkB,OAAOtB,GAClCqB,EAASC,OAAOF,EAAMpB,IAO9B,QAASS,GAAec,GAEpB,GAAIC,MAAMC,QAAQF,GACd,IAAI,GAAIG,GAAI,EAAGA,EAAIH,EAASI,OAAQD,IAChCE,EAAqBL,EAASG,QAGlCE,GAAqBL,GAK7B,QAASK,GAAqBR,GACtBC,EAASjB,IAAIgB,KACbC,EAASjB,IAAIgB,GAAMS,QAAQ,SAAU7B,GACjCiB,EAAcb,IAAI,SAASkB,OAAOtB,KAEtCqB,EAASS,MAAMV,IAKvB,QAASW,KACL,IAAK,GAAIX,KAAQC,GACbZ,EAAeW,GAKvB,QAASjB,GAAOiB,EAAMpB,GAElB,MADAqB,GAASW,IAAIZ,EAAMpB,GACZA,EAtDX,GAAIqB,GAAWH,CAEf,QACIT,eAAgBA,EAChBsB,kBAAmBA,EACnBZ,oBAAqBA,EACrBhB,OAAQA,GAuDhB,QAASe,KAWL,QAASe,GAAOb,GACZ,MAAGc,GAAKd,GACGc,EAAKd,MAMpB,QAASjB,GAAOiB,EAAMpB,GAClB,GAAKkC,EAAKd,IAGN,IAAI,GAAIM,GAAI,EAAGA,EAAIQ,EAAKd,GAAMO,OAAQD,IAClC,GAAGQ,EAAKd,GAAMM,IAAM1B,EAChB,WAJRmC,GAASf,EAQbc,GAAKd,GAAMgB,KAAKpC,GAGpB,QAASqC,GAAUjB,EAAMpB,GACrB,GAAGkC,EAAKd,GACJ,IAAK,GAAIM,GAAI,EAAGA,EAAIQ,EAAKd,GAAMO,OAAQD,IACnC,GAAGQ,EAAKd,GAAMM,IAAM1B,EAEhB,WADAkC,GAAKd,GAAMkB,OAAOZ,EAAG,GAOrC,QAASS,GAASf,GACdc,EAAKd,MA3CT,GAAIc,KACJ,QACI9B,IAAK6B,EACLD,IAAK7B,EACLmB,OAAQe,EACRP,MAAOK,GA1IfI,QACKC,OAAO,0BACPC,QAAQ,aAAc7C,GACtB6C,QAAQ,WAAY3C,GACpB2C,QAAQ,YAAavB,GAK1BtB,EAAW8C,SAAW,QAAS,YA2D/B5C,EAAS4C,SAAW,gBAAiB","file":"angular-http-helper.min.js","sourcesContent":["/**\n * Created by ericjohndixon on 3/15/16.\n */\n(function () {\n    'use strict';\n\n    angular\n        .module('angular-http-helper', [])\n        .factory('HttpHelper', HttpHelper)\n        .factory('UrlCache', UrlCache)\n        .factory('cacheSets', cacheSets);\n\n    /*****************************************************************************************************\n     * HTTP HELPER\n     *****************************************************************************************************/\n    HttpHelper.$inject = ['$http', 'UrlCache'];\n\n    function HttpHelper($http, UrlCache) {\n        return {\n            get: getMethod,\n            post: postMethod,\n            put: putMethod,\n            delete: deleteMethod,\n            jsonp: jsonpMethond\n        };\n\n        /////////////////////////////////////////////////////////\n\n        /********************************************************************\n         * GET\n         ********************************************************************/\n        function getMethod(url, willCache, cacheSetName) {\n            willCache = (willCache) ? willCache : false;\n            url = (cacheSetName) ? UrlCache.addUrl(cacheSetName, url) : url;\n            return $http.get(url, {cache: willCache});\n        }\n\n        /********************************************************************\n         * POST\n         ********************************************************************/\n        function postMethod(url, data, cacheSetNames) {\n            (cacheSetNames) ? UrlCache.deleteUrlCache(cacheSetNames) : '';\n            return $http.post(url, data);\n        }\n\n        /********************************************************************\n         * PUT\n         ********************************************************************/\n        function putMethod(url, data, cacheSetNames) {\n            (cacheSetNames) ? UrlCache.deleteUrlCache(cacheSetNames) : '';\n            return $http.put(url, data);\n        }\n\n        /********************************************************************\n         * DELETE\n         ********************************************************************/\n        function deleteMethod(url, cacheSetNames) {\n            (cacheSetNames) ? UrlCache.deleteUrlCache(cacheSetNames) : '';\n            return $http.delete(url);\n        }\n\n        /*****************************************************************************************************\n         * JSONP\n         *****************************************************************************************************/\n         function jsonpMethond(url, willCache, cacheSetName) {\n            willCache = (willCache) ? willCache : false;\n            url = (cacheSetName) ? UrlCache.addUrl(cacheSetName, url) : url;\n            return $http.jsonp(url, {cache: willCache});\n        }\n    }\n\n    /*****************************************************************************************************\n     * URL CACHE SERVICE\n     *****************************************************************************************************/\n    UrlCache.$inject = ['$cacheFactory', 'cacheSets'];\n\n    function UrlCache($cacheFactory, cacheSets) {\n        var urlCache = cacheSets;\n\n        return {\n            deleteUrlCache: deleteUrlCache,\n            deleteAllUrlCache: deleteAllUrlCache,\n            deleteUrlCacheByUrl: deleteUrlCacheByUrl,\n            addUrl: addUrl\n        };\n\n        /////////////////////////////////////////////////////////\n\n\n        //deletes a single url cached within a named set\n        function deleteUrlCacheByUrl(name, url) {\n            if (urlCache.get(name)) {\n                $cacheFactory.get('$http').remove(url);\n                urlCache.remove(name, url);\n            } else {\n                console.log('No cache is currently saved by the name' + name);\n            }\n        }\n\n        // deletes cache set of urls based on array of names or single name passed\n        function deleteUrlCache(urlItems) {\n            //if it is array delete the array of names\n            if (Array.isArray(urlItems)) {\n                for(var i = 0; i < urlItems.length; i++) {\n                    deleteUrlCacheByName(urlItems[i]);\n                }\n            } else { //if it is a single name delete that one\n                deleteUrlCacheByName(urlItems);\n            }\n\n        }\n\n        function deleteUrlCacheByName(name) {\n            if (urlCache.get(name)) {\n                urlCache.get(name).forEach(function (url) {\n                    $cacheFactory.get('$http').remove(url);\n                });\n                urlCache.reset(name);\n            }\n        }\n\n\n        function deleteAllUrlCache() {\n            for (var name in urlCache) {\n                deleteUrlCache(name);\n            }\n        }\n\n        // this function returns the url to cut down on line within the services\n        function addUrl(name, url) {\n            urlCache.add(name, url);\n            return url;\n        }\n    }\n\n    /*****************************************************************************************************\n     * CACHE SETS\n     *****************************************************************************************************/\n    function cacheSets() {\n        var sets = {};\n        return {\n            get: getSet,\n            add: addUrl,\n            remove: removeUrl,\n            reset: resetSet\n        };\n\n        ////////////////////////////////////////////////\n\n        function getSet(name) {\n            if(sets[name]) {\n                return sets[name];\n            } else {\n                return [];\n            }\n        }\n\n        function addUrl(name, url) {\n            if (!sets[name]) {\n                resetSet(name);\n            } else {\n                for(var i = 0; i < sets[name].length; i++){\n                    if(sets[name][i] == url) {\n                        return;\n                    }\n                }\n            }\n            sets[name].push(url);\n        }\n\n        function removeUrl(name, url) {\n            if(sets[name]) {\n                for (var i = 0; i < sets[name].length; i++) {\n                    if(sets[name][i] == url) {\n                        sets[name].splice(i, 1);\n                        return;\n                    }\n                }\n            }\n        }\n\n        function resetSet(name) {\n            sets[name] = [];\n        }\n    }\n})();"],"sourceRoot":"/source/"}